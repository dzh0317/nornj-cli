<#if {%!mobx%}>import { types } from 'mobx-state-tree';
</#if>import { observable, toJS, action } from 'mobx';
import BaseStore from './base.{%mobx ? 'store' : 'mst'%}';
import * as api from '@/services/{%storeName%}';

<#if {%mobx%}>class {%storeName | capitalize%}Store extends BaseStore {
  @observable bool = true;
  @observable strs = '';
  @observable arrs = [];
  @observable modData = null;

  @action
  getModData(params) {
    return api.getModData(params).then(res =>
      this.receiveResponse(() => {
        if (res.data.success) {
          this.modData = res.data.data;
        }
        return res;
      })
    );
  }
}<#else>const {%storeName | capitalize%}Store = BaseStore.named('{%storeName | capitalize%}Store')
  .props({
    bool: types.optional(types.boolean, true),
    strs: types.optional(types.string, ''),
    arrs: types.optional(types.array(types.string), []),
  })
  .volatile(self => ({
    modData: null,
  }))
  .views(self => ({}))
  .actions(self => ({
    afterCreate() {},

    getModData(params) {
      return api.getModData(params).then(res =>
        self.receiveResponse(() => {
          if (res.data.success) {
            self.modData = res.data.data;
          }
          return res;
        })
      );
    }
  }));</#else></#if>

export default {%storeName | capitalize%}Store;
