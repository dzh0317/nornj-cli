<#if {%!mobx%}>import { types, flow } from 'mobx-state-tree';
</#if>import { observable, toJS, action } from 'mobx';
import * as api from '@/services/pages/{%pageName%}';

<#if {%mobx%}>class {%pageName | capitalize%}Store {
  @observable bool = true;
  @observable strs = '';
  @observable arrs: any[] = [];
  @observable modData: any = null;

  @action
  async getModData(params: object) {
    const res: ServiceResponse = await api.getModData(params);
    this.modData = res.data.data;
  }
}<#else>const {%pageName | capitalize%}Store = types
  .model('{%pageName | capitalize%}Store', {
    bool: types.optional(types.boolean, true),
    strs: types.optional(types.string, ''),
    arrs: types.optional(types.array(types.string), []),
  })
  .volatile(self => ({
    modData: null,
  }))
  .views(self => ({}))
  .actions(_self => {
    const self = _self as typeof {%pageName | capitalize%}Store.Type;
    return {
      afterCreate() {},
  
      getModData: flow(function* (params: object) {
        const res: ServiceResponse = yield api.getModData(params);
        self.modData = res.data.data;
      })
    };
  });</#else></#if>

export default {%pageName | capitalize%}Store;
